/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include <algorithm>

// defination of TPin class
#include "iopins.h"

// defination of PinList class
#include "pinlist.h"

// defination of Dispatcher class
#include "dispatcher.h"

#include "delegate.h"

#include "array.h"
#include "span.h"
#include "stack.h"
#include "read_write_buffer.h"
#include "read_write_counter.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

uint32_t HAL_GetTick(void);

void BlinkBlue(void);
//void BlinkRed(void);
//void BlinkGreen(void);

struct PortPin{
	GPIO_TypeDef* port = PC0_GPIO_Port;
	uint16_t pin = PC0_Pin;
};

class Bar {
public:
	void blink(void){
		HAL_GPIO_TogglePin(PC0_GPIO_Port, PC0_Pin);
	}
};

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */

  using namespace Mcucpp;
  // all IO stuff are in namespce
  using namespace Mcucpp::IO;
  using namespace Mcucpp::Containers;


  Porta::Set<0x22>();
  Portb::Set<0x404>();
  Portc::Set<0x5>();

  HAL_Delay(1000);

  Porta::Clear<0x22>();
  Portb::Clear<0x404>();
  Portc::Clear<0x5>();

  HAL_Delay(1000);

  Pa1::Set();
  Pa5::Set();
  Pb2::Set();
  Pb10::Set();
  Pc0::Set();
  Pc2::Set();

  HAL_Delay(1000);

  typedef PinList<Pa1, Pa5, Pb2, Pb10, Pc0, Pc2> Group1;

  Group1::Write(0b010101);

  GetCurrentDispatcher().SetTimerFunc(HAL_GetTick);

  Bar bar;
  Delegate<void> d1(bar, &Bar::blink);

  Delegate2<void, GPIO_TypeDef*, uint16_t> d2(HAL_GPIO_TogglePin);

  BlinkBlue();
//  BlinkRed();
//  BlinkGreen();

  uint8_t val = 1;
  FixedArray<16, uint8_t, VoidAtomic> arr;
  arr.assign(16, val);

  val = 2;
  span<uint8_t> sp(&arr[0], &arr[8]);
  std::fill(sp.begin(), sp.end(), val);

  uint8_t temp1 = arr[7];
  uint8_t temp2 = arr[10];

  FixedStack<16, uint32_t, Atomic> st;

  for (uint8_t i = 0; i != 16; ++i){
	  st.push_front(i);
  }

  uint32_t st_arr[16];

  for (uint8_t i = 0; i != 16; ++i){
  	  st_arr[i] = st.front();
  	  st.pop_front();
    }

  typedef struct {}tag;

  ReadWriteBuffer<8, tag> buf;
  ReadWriteCounterAdapter< ReadWriteBuffer<8, tag> > rwc(buf);

  for (uint8_t i = 0; i != 8; ++i){
    	  rwc.Write(127);
      }

  for (uint8_t i = 0; i != 8; ++i){
      	  st_arr[i] =(uint32_t)rwc.Read();
        }

  size_t a = rwc.Count.Read();
  size_t b = rwc.Count.Written();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 	  GetCurrentDispatcher().Poll();
	  HAL_Delay(500);
	  d1();
	  HAL_Delay(500);
	  d2(PB2_GPIO_Port, PB2_Pin);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void BlinkBlue(void){

	Mcucpp::IO::Pa1::Toggle();
	Mcucpp::GetCurrentDispatcher().SetTimer(250, &BlinkBlue);
}
//void BlinkRed(void){
//
//	Mcucpp::IO::Pb2::Toggle();
//	Mcucpp::GetCurrentDispatcher().SetTimer(500, &BlinkRed);
//}
//void BlinkGreen(void){
//
//	Mcucpp::IO::Pc0::Toggle();
//	Mcucpp::GetCurrentDispatcher().SetTimer(750, &BlinkGreen);
//}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
